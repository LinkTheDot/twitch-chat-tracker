use clap::{Arg, Command};
use lazy_static::lazy_static;

lazy_static! {
  pub static ref CLAP_ARGS: ClapArgs = ClapArgs::new();
}

pub struct ClapArgs {
  args: clap::ArgMatches,
}

impl ClapArgs {
  const STREAM_REPORT_ID: &'static str = "stream_report_id";
  const GENERATE_FILE_REPORTS: &'static str = "generate_file_reports";
  const DONATION_RANKING_REPORT_YEAR: &'static str = "donation_ranking_report_year";
  const DONATION_RANKING_REPORT_MONTH: &'static str = "donation_ranking_report_month";
  const STREAM_REPORT_TIME: &'static str = "stream_report_time";
  const CREATE_REPORT_TOTALS: &'static str = "create_report_totals";

  pub fn new() -> Self {
    let args = Self::setup_args();

    Self { args }
  }

  pub fn report_stream_id(&self) -> i32 {
    let value = self.args.get_one::<String>(Self::STREAM_REPORT_ID).unwrap();

    value.parse::<i32>().unwrap()
  }

  pub fn generate_file_reports(&self) -> bool {
    self.args.get_flag(Self::GENERATE_FILE_REPORTS)
  }

  pub fn get_month(&self) -> Option<usize> {
    let value = self
      .args
      .get_one::<String>(Self::DONATION_RANKING_REPORT_MONTH)?;

    value.parse::<usize>().ok()
  }

  pub fn get_year(&self) -> Option<usize> {
    let value = self
      .args
      .get_one::<String>(Self::DONATION_RANKING_REPORT_YEAR)?;

    value.parse::<usize>().ok()
  }

  pub fn stream_report_time(&self) -> Option<&String> {
    self.args.get_one::<String>(Self::STREAM_REPORT_TIME)
  }

  pub fn generate_report_totals(&self) -> bool {
    *self
      .args
      .get_one::<bool>(Self::CREATE_REPORT_TOTALS)
      .unwrap()
  }

  fn setup_args() -> clap::ArgMatches {
    Command::new("Twitch Chat Parser")
      .arg(
        Arg::new(Self::STREAM_REPORT_ID)
          .short('s')
          .long("report-stream")
          .action(clap::ArgAction::Set)
          .help("Assigns which stream ID from the database to generate a report with."),
      )
      .arg(
        Arg::new(Self::GENERATE_FILE_REPORTS)
          .short('f')
          .long("file_export")
          .action(clap::ArgAction::SetTrue)
          .help("With this flag active, the reports generated by the `database_report_generator` will be exported to files instead of pastebin."),
      )
      .arg(
        Arg::new(Self::DONATION_RANKING_REPORT_YEAR)
          .short('y')
          .long("donation_rank_year")
          .action(clap::ArgAction::Set)
          .help("Sets which year to generate the donator ranking report for."),
      )
      .arg(
        Arg::new(Self::DONATION_RANKING_REPORT_MONTH)
          .short('m')
          .long("donation_rank_month")
          .action(clap::ArgAction::Set)
          .help("Sets which month to generate the donator ranking report for."),
      )
      .arg(
        Arg::new(Self::STREAM_REPORT_TIME)
          .short('t')
          .long("report_time")
          .action(clap::ArgAction::Set)
            .help("Sets how long in a stream to generate a report for. Takes a duration like `1:30:00` for 1.5 hours into a stream to gather the data in a report to. (WIP. Doesn't do anything at the moment.)"),
      )
      .arg(
        Arg::new(Self::CREATE_REPORT_TOTALS)
          .long("total")
          .action(clap::ArgAction::SetTrue)
            .help("Creates additional files that reports on all data in the database."),
      )
      .get_matches()
  }
}

impl Default for ClapArgs {
  fn default() -> Self {
    Self::new()
  }
}

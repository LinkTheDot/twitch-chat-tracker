//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use super::sea_orm_active_enums::ExternalService;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "emote")]
pub struct Model {
  #[sea_orm(primary_key)]
  pub id: i32,
  pub external_id: String,
  pub name: String,
  pub external_service: ExternalService,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(has_many = "super::emote_usage::Entity")]
  EmoteUsage,
}

impl Related<super::emote_usage::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::EmoteUsage.def()
  }
}

impl Related<super::stream_message::Entity> for Entity {
  fn to() -> RelationDef {
    super::emote_usage::Relation::StreamMessage.def()
  }
  fn via() -> Option<RelationDef> {
    Some(super::emote_usage::Relation::Emote.def().rev())
  }
}

impl ActiveModelBehavior for ActiveModel {}

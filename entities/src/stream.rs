//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "stream")]
pub struct Model {
  #[sea_orm(primary_key)]
  pub id: i32,
  #[sea_orm(unique)]
  pub twitch_stream_id: u64,
  pub start_timestamp: Option<DateTimeUtc>,
  pub end_timestamp: Option<DateTimeUtc>,
  pub twitch_user_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(has_many = "super::donation_event::Entity")]
  DonationEvent,
  #[sea_orm(has_many = "super::raid::Entity")]
  Raid,
  #[sea_orm(has_many = "super::stream_message::Entity")]
  StreamMessage,
  #[sea_orm(has_many = "super::stream_name::Entity")]
  StreamName,
  #[sea_orm(has_many = "super::subscription_event::Entity")]
  SubscriptionEvent,
  #[sea_orm(
    belongs_to = "super::twitch_user::Entity",
    from = "Column::TwitchUserId",
    to = "super::twitch_user::Column::Id",
    on_update = "NoAction",
    on_delete = "Cascade"
  )]
  TwitchUser,
  #[sea_orm(has_many = "super::user_timeout::Entity")]
  UserTimeout,
}

impl Related<super::donation_event::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::DonationEvent.def()
  }
}

impl Related<super::raid::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Raid.def()
  }
}

impl Related<super::stream_message::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::StreamMessage.def()
  }
}

impl Related<super::stream_name::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::StreamName.def()
  }
}

impl Related<super::subscription_event::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::SubscriptionEvent.def()
  }
}

impl Related<super::twitch_user::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::TwitchUser.def()
  }
}

impl Related<super::user_timeout::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::UserTimeout.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}

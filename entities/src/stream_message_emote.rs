//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "stream_message_emote")]
pub struct Model {
  #[sea_orm(primary_key)]
  pub id: i32,
  pub positions: String,
  pub message_id: i32,
  pub emote_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(
    belongs_to = "super::emote::Entity",
    from = "Column::EmoteId",
    to = "super::emote::Column::Id",
    on_update = "NoAction",
    on_delete = "SetNull"
  )]
  Emote,
  #[sea_orm(
    belongs_to = "super::stream_message::Entity",
    from = "Column::MessageId",
    to = "super::stream_message::Column::Id",
    on_update = "NoAction",
    on_delete = "Cascade"
  )]
  StreamMessage,
}

impl Related<super::emote::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Emote.def()
  }
}

impl Related<super::stream_message::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::StreamMessage.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}

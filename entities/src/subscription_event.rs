//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "subscription_event")]
pub struct Model {
  #[sea_orm(primary_key)]
  pub id: i32,
  pub months_subscribed: i32,
  pub timestamp: DateTimeUtc,
  pub channel_id: i32,
  pub stream_id: Option<i32>,
  pub subscriber_twitch_user_id: Option<i32>,
  pub subscription_tier: Option<i32>,
  #[sea_orm(unique)]
  pub source_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(
    belongs_to = "super::stream::Entity",
    from = "Column::StreamId",
    to = "super::stream::Column::Id",
    on_update = "NoAction",
    on_delete = "SetNull"
  )]
  Stream,
  #[sea_orm(
    belongs_to = "super::twitch_user::Entity",
    from = "Column::ChannelId",
    to = "super::twitch_user::Column::Id",
    on_update = "NoAction",
    on_delete = "Cascade"
  )]
  TwitchUser2,
  #[sea_orm(
    belongs_to = "super::twitch_user::Entity",
    from = "Column::SubscriberTwitchUserId",
    to = "super::twitch_user::Column::Id",
    on_update = "NoAction",
    on_delete = "SetNull"
  )]
  TwitchUser1,
}

impl Related<super::stream::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Stream.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}
